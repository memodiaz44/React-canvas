{"ast":null,"code":"var _jsxFileName = \"/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx\";\nimport React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCreateNewCanvas = () => {\n      const saveData = localStorage.getItem('canvasSaveData');\n      if (saveData) {\n        const parsedData = JSON.parse(saveData);\n        const modifiedLines = parsedData.lines.map(line => {\n          if (line.brushColor === \"#444\") {\n            return {\n              ...line,\n              brushColor: \"grey\"\n            };\n          }\n          return line;\n        });\n        const modifiedSaveData = JSON.stringify({\n          ...parsedData,\n          lines: modifiedLines\n        });\n        console.log(modifiedSaveData);\n        localStorage.setItem(\"canvasSaveData\", modifiedSaveData);\n        this.canvasRef.current.loadSaveData(modifiedSaveData, true);\n      }\n    };\n    this.saveCanvas = () => {\n      if (this.canvasRef.current) {\n        const saveData = this.canvasRef.current.getSaveData();\n\n        // Load the previous canvas data from localStorage\n        const previousSaveData = localStorage.getItem('canvasSaveData');\n        if (previousSaveData) {\n          const parsedPreviousData = JSON.parse(previousSaveData);\n\n          // Remove the modifications made by handleCreateNewCanvas\n          parsedPreviousData.lines[0].brushColor = '#444';\n\n          // Save the modified previous data to localStorage\n          localStorage.setItem('canvasSaveData', JSON.stringify(parsedPreviousData));\n        }\n\n        // Save the new canvas data to localStorage\n        localStorage.setItem('canvasSaveData', saveData);\n        this.setState({\n          canvasSaveData: saveData\n        });\n      }\n    };\n    this.clearCanvas = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.clear();\n      }\n    };\n    this.nextCAnvas = () => {\n      const {\n        brushColor\n      } = this.canvasRef.current.props;\n      if (brushColor === '#444') {\n        this.canvasRef.current.update({\n          brushColor: '#ff0000'\n        });\n      } else {\n        this.canvasRef.current.update({\n          brushColor: '#444'\n        });\n      }\n    };\n    this.loadCanvas = () => {\n      const {\n        drawingData\n      } = this.props;\n      if (drawingData) {\n        const parsedData = JSON.parse(drawingData);\n        const modifiedLines = parsedData.lines.map(line => {\n          if (line.brushColor === \"#444\") {\n            return {\n              ...line,\n              brushColor: \"grey\"\n            };\n          }\n          return line;\n        });\n        const modifiedDrawingData = JSON.stringify({\n          ...parsedData,\n          lines: modifiedLines\n        });\n        this.canvasRef.current.loadSaveData(modifiedDrawingData, true);\n      }\n    };\n    this.exportCanvasDataURL = () => {\n      if (this.canvasRef.current) {\n        const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n        console.log(dataURL);\n      }\n    };\n    this.clearDrawing = () => {\n      if (this.canvasRef.current) {\n        localStorage.removeItem('canvasSaveData');\n        this.canvasRef.current.clear();\n      }\n    };\n    this.eraseAll = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.eraseAll();\n      }\n    };\n    this.resetView = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.resetView();\n      }\n    };\n    this.undoDrawing = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.undo();\n      }\n    };\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      canvasKey: 0,\n      canvasSaveData: null\n    };\n  }\n  render() {\n    const {\n      canvasKey\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newone\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Canvas Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleCreateNewCanvas,\n        children: \"Create New Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.nextCAnvas,\n        children: \"Change Red/Black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.saveCanvas,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.loadCanvas,\n        children: \"Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.exportCanvasDataURL,\n        children: \"Export Data URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearDrawing,\n        children: \"Clear Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.eraseAll,\n        children: \"Erase All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetView,\n        children: \"Reset View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.undoDrawing,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n        ref: this.canvasRef\n      }, canvasKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Canvas;","map":{"version":3,"names":["React","Component","CanvasDraw","jsxDEV","_jsxDEV","Canvas","constructor","props","handleCreateNewCanvas","saveData","localStorage","getItem","parsedData","JSON","parse","modifiedLines","lines","map","line","brushColor","modifiedSaveData","stringify","console","log","setItem","canvasRef","current","loadSaveData","saveCanvas","getSaveData","previousSaveData","parsedPreviousData","setState","canvasSaveData","clearCanvas","clear","nextCAnvas","update","loadCanvas","drawingData","modifiedDrawingData","exportCanvasDataURL","dataURL","getDataURL","clearDrawing","removeItem","eraseAll","resetView","undoDrawing","undo","createRef","state","canvasKey","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\"\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      canvasKey: 0,\n      canvasSaveData: null\n    };\n  }\n\n  handleCreateNewCanvas = () => {\n    const saveData = localStorage.getItem('canvasSaveData');\n    if (saveData) {\n      const parsedData = JSON.parse(saveData);\n      const modifiedLines = parsedData.lines.map(line => {\n        if (line.brushColor === \"#444\") {\n          return { ...line, brushColor: \"grey\" };\n        }\n        return line;\n      });\n  \n      const modifiedSaveData = JSON.stringify({ ...parsedData, lines: modifiedLines });\n      console.log(modifiedSaveData);\n      localStorage.setItem(\"canvasSaveData\", modifiedSaveData);\n      this.canvasRef.current.loadSaveData(modifiedSaveData, true);\n    }\n  };\n  \n  \n  saveCanvas = () => {\n    if (this.canvasRef.current) {\n      const saveData = this.canvasRef.current.getSaveData();\n  \n      // Load the previous canvas data from localStorage\n      const previousSaveData = localStorage.getItem('canvasSaveData');\n  \n      if (previousSaveData) {\n        const parsedPreviousData = JSON.parse(previousSaveData);\n  \n        // Remove the modifications made by handleCreateNewCanvas\n        parsedPreviousData.lines[0].brushColor = '#444';\n  \n        // Save the modified previous data to localStorage\n        localStorage.setItem('canvasSaveData', JSON.stringify(parsedPreviousData));\n      }\n  \n      // Save the new canvas data to localStorage\n      localStorage.setItem('canvasSaveData', saveData);\n      this.setState({ canvasSaveData: saveData });\n    }\n  };\n  \n\n  clearCanvas = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.clear();\n      \n    }\n  };\n  \n  nextCAnvas = () => {\n    const { brushColor } = this.canvasRef.current.props;\n\n    if (brushColor === '#444') {\n      this.canvasRef.current.update({ brushColor: '#ff0000' });\n    } else {\n      this.canvasRef.current.update({ brushColor: '#444' });\n    } \n  };\n  \n  loadCanvas = () => {\n    const { drawingData } = this.props;\n    if (drawingData) {\n      const parsedData = JSON.parse(drawingData);\n      const modifiedLines = parsedData.lines.map(line => {\n        if (line.brushColor === \"#444\") {\n          return { ...line, brushColor: \"grey\" };\n        }\n        return line;\n      });\n    \n      const modifiedDrawingData = JSON.stringify({ ...parsedData, lines: modifiedLines });\n      this.canvasRef.current.loadSaveData(modifiedDrawingData, true);\n    }\n  };\n  \n  \n  \n  \n\n\n\n  exportCanvasDataURL = () => {\n    if (this.canvasRef.current) {\n      const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n      console.log(dataURL);\n    }\n  };\n\n  clearDrawing = () => {\n    if (this.canvasRef.current) {\n        localStorage.removeItem('canvasSaveData');\n      this.canvasRef.current.clear();\n      \n    }\n  };\n\n  eraseAll = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.eraseAll();\n    }\n  };\n\n  resetView = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.resetView();\n    }\n  };\n\n  undoDrawing = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.undo();\n    }\n  };\n\n  render() {\n    const { canvasKey } = this.state;\n\n    return (\n      <div className='newone'>\n        <h1>Canvas Component</h1>\n        \n        <button onClick={this.handleCreateNewCanvas}>Create New Canvas</button>\n        <button onClick={this.clearCanvas}>Clear Canvas</button>\n        <button onClick={this.nextCAnvas}>Change Red/Black</button>\n        <button onClick={this.saveCanvas}>Save</button>\n        <button onClick={this.loadCanvas}>Load</button>\n        <button onClick={this.exportCanvasDataURL}>Export Data URL</button>\n        <button onClick={this.clearDrawing}>Clear Drawing</button>\n        <button onClick={this.eraseAll}>Erase All</button>\n        <button onClick={this.resetView}>Reset View</button>\n        <button onClick={this.undoDrawing}>Undo</button>\n        <CanvasDraw ref={this.canvasRef} key={canvasKey} />\n      </div>\n    );\n  }\n}\n\nexport default Canvas; \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}