{"ast":null,"code":"var _jsxFileName = \"/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [canvasKey, setCanvasKey] = useState(0);\n  const handleCreateNewCanvas = () => {\n    setCanvasKey(prevKey => prevKey + 1);\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current.canvas.drawing;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvasRef.current.clear();\n  };\n  const nextCAnvas = () => {\n    if (canvasRef.current.props.brushColor === '#444') {\n      canvasRef.current.props = {\n        brushColor: \"#ff0000\"\n      }; // Update to the new brush color\n    } else {\n      canvasRef.current.props = {\n        brushColor: \"#444\"\n      };\n    }\n  };\n  const saveCanvas = () => {\n    if (canvasRef.current) {\n      const canvasState = {\n        brushColor: canvasRef.current.props.brushColor\n        // Include any other properties or data from the canvasRef object that you want to save\n      };\n\n      localStorage.setItem(\"canvasState\", JSON.stringify(canvasState));\n    }\n  };\n  const get = () => {\n    let canvasData = localStorage.getItem('canvasRef');\n    let canvasRef = JSON.parse(canvasData);\n    console.log(canvasRef);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Canvas Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateNewCanvas,\n      children: \"Create New Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearCanvas,\n      children: \"Clear Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextCAnvas,\n      children: \"Change Red/Blacn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveCanvas,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: get,\n      children: \"get\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n      ref: canvasRef\n    }, canvasKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"cQGgtP80E3VgkgqqBW31tRuUbEk=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useState","CanvasDraw","jsxDEV","_jsxDEV","Canvas","_s","canvasRef","canvasKey","setCanvasKey","handleCreateNewCanvas","prevKey","clearCanvas","canvas","current","drawing","context","getContext","clearRect","width","height","clear","nextCAnvas","props","brushColor","saveCanvas","canvasState","localStorage","setItem","JSON","stringify","get","canvasData","getItem","parse","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_c","$RefreshReg$"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\n\nconst Canvas = () => {\n  const canvasRef = useRef(null);\n  const [canvasKey, setCanvasKey] = useState(0);\n\n  const handleCreateNewCanvas = () => {\n    setCanvasKey(prevKey => prevKey + 1);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current.canvas.drawing;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvasRef.current.clear();\n  };\n\n  const nextCAnvas = () => {\n    \n    if(canvasRef.current.props.brushColor ==='#444'){\n       \n        canvasRef.current.props = {brushColor: \"#ff0000\" } // Update to the new brush color\n    }else {\n        canvasRef.current.props = {brushColor: \"#444\" }\n    }\n   \n  }\n  const saveCanvas = () => {\n    if (canvasRef.current) {\n      const canvasState = {\n        brushColor: canvasRef.current.props.brushColor,\n        // Include any other properties or data from the canvasRef object that you want to save\n      };\n      localStorage.setItem(\"canvasState\", JSON.stringify(canvasState));\n    }\n  }\n  \n  \n  const get = () => {\n    let canvasData = localStorage.getItem('canvasRef');\n    let canvasRef = JSON.parse(canvasData);\n    console.log(canvasRef);\n  }\n  \n  \n  \n\n\n\n  return (\n    <div>\n      <h1>Canvas Component</h1>\n      <button onClick={handleCreateNewCanvas}>Create New Canvas</button>\n      <button onClick={clearCanvas}>Clear Canvas</button>\n      <button onClick={nextCAnvas}>Change Red/Blacn</button>\n      <button onClick={saveCanvas}>Save</button>\n      <button onClick={get}>get</button>\n      <CanvasDraw ref={canvasRef} key={canvasKey} />\n    </div>\n  );\n};\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}