{"ast":null,"code":"var _jsxFileName = \"/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [canvasKey, setCanvasKey] = useState(0);\n  const handleCreateNewCanvas = () => {\n    setCanvasKey(prevKey => prevKey + 1);\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current.canvas.drawing;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvasRef.current.clear();\n  };\n  const nextCAnvas = () => {\n    if (canvasRef.current.props.brushColor === '#444') {\n      canvasRef.current.props = {\n        brushColor: \"#ff0000\"\n      }; // Update to the new brush color\n    } else {\n      canvasRef.current.props = {\n        brushColor: \"#444\"\n      };\n    }\n  };\n  const saveCanvas = () => {\n    if (canvasRef) {\n      const canvasProps = Object.assign({}, canvasRef.current.props);\n      localStorage.setItem(\"canvasProps\", JSON.stringify(canvasProps));\n    }\n  };\n  const isEmptyCanvas = canvas => {\n    const context = canvas.getContext('2d');\n    const canvasData = context.getImageData(0, 0, canvas.width, canvas.height).data;\n\n    // Check if any pixel in the canvas data has a non-zero alpha value\n    for (let i = 3; i < canvasData.length; i += 4) {\n      if (canvasData[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const get = () => {\n    const canvasProps = localStorage.getItem('canvasProps');\n    if (canvasProps) {\n      const parsedCanvasProps = JSON.parse(canvasProps);\n      console.log(parsedCanvasProps);\n    }\n  };\n  const print = () => {\n    if (isEmptyCanvas(canvasRef.current)) {\n      console.log('hey ya');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Canvas Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateNewCanvas,\n      children: \"Create New Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearCanvas,\n      children: \"Clear Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextCAnvas,\n      children: \"Change Red/Blacn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveCanvas,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: get,\n      children: \"get\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: print,\n      children: \"print\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n      ref: canvasRef\n    }, canvasKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"cQGgtP80E3VgkgqqBW31tRuUbEk=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useState","CanvasDraw","jsxDEV","_jsxDEV","Canvas","_s","canvasRef","canvasKey","setCanvasKey","handleCreateNewCanvas","prevKey","clearCanvas","canvas","current","drawing","context","getContext","clearRect","width","height","clear","nextCAnvas","props","brushColor","saveCanvas","canvasProps","Object","assign","localStorage","setItem","JSON","stringify","isEmptyCanvas","canvasData","getImageData","data","i","length","get","getItem","parsedCanvasProps","parse","console","log","print","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_c","$RefreshReg$"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\n\nconst Canvas = () => {\n  const canvasRef = useRef(null);\n  const [canvasKey, setCanvasKey] = useState(0);\n\n  const handleCreateNewCanvas = () => {\n    setCanvasKey(prevKey => prevKey + 1);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current.canvas.drawing;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvasRef.current.clear();\n  };\n\n  const nextCAnvas = () => {\n    \n    if(canvasRef.current.props.brushColor ==='#444'){\n       \n        canvasRef.current.props = {brushColor: \"#ff0000\" } // Update to the new brush color\n    }else {\n        canvasRef.current.props = {brushColor: \"#444\" }\n    }\n   \n  }\n  \n  const saveCanvas = () => {\n    if (canvasRef) {\n      const canvasProps = Object.assign({}, canvasRef.current.props);\n      localStorage.setItem(\"canvasProps\", JSON.stringify(canvasProps));\n    }\n  }\n\n  const isEmptyCanvas = (canvas) => {\n    const context = canvas.getContext('2d');\n    const canvasData = context.getImageData(0, 0, canvas.width, canvas.height).data;\n    \n    // Check if any pixel in the canvas data has a non-zero alpha value\n    for (let i = 3; i < canvasData.length; i += 4) {\n      if (canvasData[i] !== 0) {\n        return false;\n      }\n    }\n    \n    return true;\n  };\n  \n  const get = () => {\n    const canvasProps = localStorage.getItem('canvasProps');\n    if (canvasProps) {\n      const parsedCanvasProps = JSON.parse(canvasProps);\n      console.log(parsedCanvasProps);\n    }\n  }\n\n  const print  = () => {\n    if(isEmptyCanvas(canvasRef.current)){\n        console.log('hey ya')\n \n    }\n\n  }\n  \n  \n  \n  \n  \n\n\n\n  return (\n    <div>\n      <h1>Canvas Component</h1>\n      <button onClick={handleCreateNewCanvas}>Create New Canvas</button>\n      <button onClick={clearCanvas}>Clear Canvas</button>\n      <button onClick={nextCAnvas}>Change Red/Blacn</button>\n      <button onClick={saveCanvas}>Save</button>\n      <button onClick={get}>get</button>\n      <button onClick={print}>print</button>\n      <CanvasDraw ref={canvasRef} key={canvasKey} />\n    </div>\n  );\n};\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}