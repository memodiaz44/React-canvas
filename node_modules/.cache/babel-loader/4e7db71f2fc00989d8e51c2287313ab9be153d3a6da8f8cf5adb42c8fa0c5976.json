{"ast":null,"code":"var _jsxFileName = \"/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx\";\nimport React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCreateNewCanvas = () => {\n      if (this.canvasRef.current && this.canvasRef.current.props) {\n        const previousOpacity = this.canvasRef.current.props.canvasOpacity;\n        this.clearCanvas();\n        this.setState({\n          canvasSaveData: null\n        });\n        localStorage.removeItem('canvasSaveData');\n\n        // Set the opacity for the new canvas\n        const newCanvasProps = {\n          brushColor: '#444',\n          canvasOpacity: previousOpacity // Use the opacity of the previous canvas\n        };\n\n        this.canvasRef.current.update(newCanvasProps);\n      }\n    };\n    this.saveCanvas = () => {\n      if (this.canvasRef.current) {\n        const saveData = this.canvasRef.current.getSaveData();\n        const loadedSaveData = localStorage.getItem('canvasSaveData');\n        const parsedData = JSON.parse(saveData);\n        const loadedData = JSON.parse(loadedSaveData);\n\n        // Check if the loaded data exists and has a newer version\n        if (!loadedData || parsedData.version > loadedData.version) {\n          // Remove the unnecessary properties from parsedData\n          parsedData.lines = parsedData.lines || [];\n          parsedData.objects = [];\n          const modifiedSaveData = JSON.stringify(parsedData);\n          localStorage.setItem('canvasSaveData', modifiedSaveData);\n        }\n      }\n    };\n    this.clearCanvas = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.clear();\n      }\n    };\n    this.nextCAnvas = () => {\n      const {\n        brushColor\n      } = this.canvasRef.current.props;\n      if (brushColor === '#444') {\n        this.canvasRef.current.update({\n          brushColor: '#ff0000'\n        });\n      } else {\n        this.canvasRef.current.update({\n          brushColor: '#444'\n        });\n      }\n    };\n    this.loadCanvas = () => {\n      const {\n        drawingData\n      } = this.props;\n      if (drawingData) {\n        this.canvasRef.current.loadSaveData(drawingData, true);\n        this.setState({\n          canvasSaveData: null\n        });\n        localStorage.removeItem('canvasSaveData');\n        this.canvasRef.current.update({\n          brushColor: '#444'\n        }); // Set the brush color to grey\n      }\n    };\n    this.exportCanvasDataURL = () => {\n      if (this.canvasRef.current) {\n        const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n        console.log(dataURL);\n      }\n    };\n    this.clearDrawing = () => {\n      if (this.canvasRef.current) {\n        localStorage.removeItem('canvasSaveData');\n        this.canvasRef.current.clear();\n      }\n    };\n    this.eraseAll = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.eraseAll();\n      }\n    };\n    this.resetView = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.resetView();\n      }\n    };\n    this.undoDrawing = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.undo();\n      }\n    };\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      canvasKey: 0,\n      canvasSaveData: null\n    };\n  }\n  render() {\n    const {\n      canvasKey\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newone\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Canvas Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleCreateNewCanvas,\n        children: \"Create New Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.nextCAnvas,\n        children: \"Change Red/Black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.saveCanvas,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.loadCanvas,\n        children: \"Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.exportCanvasDataURL,\n        children: \"Export Data URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearDrawing,\n        children: \"Clear Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.eraseAll,\n        children: \"Erase All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetView,\n        children: \"Reset View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.undoDrawing,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n        ref: this.canvasRef\n      }, canvasKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Canvas;","map":{"version":3,"names":["React","Component","CanvasDraw","jsxDEV","_jsxDEV","Canvas","constructor","props","handleCreateNewCanvas","canvasRef","current","previousOpacity","canvasOpacity","clearCanvas","setState","canvasSaveData","localStorage","removeItem","newCanvasProps","brushColor","update","saveCanvas","saveData","getSaveData","loadedSaveData","getItem","parsedData","JSON","parse","loadedData","version","lines","objects","modifiedSaveData","stringify","setItem","clear","nextCAnvas","loadCanvas","drawingData","loadSaveData","exportCanvasDataURL","dataURL","getDataURL","console","log","clearDrawing","eraseAll","resetView","undoDrawing","undo","createRef","state","canvasKey","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\"\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      canvasKey: 0,\n      canvasSaveData: null\n    };\n  }\n\n  handleCreateNewCanvas = () => {\n    if (this.canvasRef.current && this.canvasRef.current.props) {\n      const previousOpacity = this.canvasRef.current.props.canvasOpacity;\n      \n      this.clearCanvas();\n      this.setState({ canvasSaveData: null });\n      localStorage.removeItem('canvasSaveData');\n  \n      // Set the opacity for the new canvas\n      const newCanvasProps = {\n        brushColor: '#444',\n        canvasOpacity: previousOpacity, // Use the opacity of the previous canvas\n      };\n      this.canvasRef.current.update(newCanvasProps);\n    }\n  };\n  \n  \n  \n  saveCanvas = () => {\n    if (this.canvasRef.current) {\n      const saveData = this.canvasRef.current.getSaveData();\n      const loadedSaveData = localStorage.getItem('canvasSaveData');\n      const parsedData = JSON.parse(saveData);\n      const loadedData = JSON.parse(loadedSaveData);\n  \n      // Check if the loaded data exists and has a newer version\n      if (!loadedData || parsedData.version > loadedData.version) {\n        // Remove the unnecessary properties from parsedData\n        parsedData.lines = parsedData.lines || [];\n        parsedData.objects = [];\n  \n        const modifiedSaveData = JSON.stringify(parsedData);\n        localStorage.setItem('canvasSaveData', modifiedSaveData);\n      }\n    }\n  };\n\n  clearCanvas = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.clear();\n      \n    }\n  };\n  \n  nextCAnvas = () => {\n    const { brushColor } = this.canvasRef.current.props;\n\n    if (brushColor === '#444') {\n      this.canvasRef.current.update({ brushColor: '#ff0000' });\n    } else {\n      this.canvasRef.current.update({ brushColor: '#444' });\n    } \n  };\n  loadCanvas = () => {\n    const { drawingData } = this.props;\n    if (drawingData) {\n      this.canvasRef.current.loadSaveData(drawingData, true);\n      this.setState({ canvasSaveData: null });\n      localStorage.removeItem('canvasSaveData');\n      this.canvasRef.current.update({ brushColor: '#444' }); // Set the brush color to grey\n    }\n  };\n  \n\n  \n\n  exportCanvasDataURL = () => {\n    if (this.canvasRef.current) {\n      const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n      console.log(dataURL);\n    }\n  };\n\n  clearDrawing = () => {\n    if (this.canvasRef.current) {\n        localStorage.removeItem('canvasSaveData');\n      this.canvasRef.current.clear();\n      \n    }\n  };\n\n  eraseAll = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.eraseAll();\n    }\n  };\n\n  resetView = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.resetView();\n    }\n  };\n\n  undoDrawing = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.undo();\n    }\n  };\n\n  render() {\n    const { canvasKey } = this.state;\n\n    return (\n      <div className='newone'>\n        <h1>Canvas Component</h1>\n        \n        <button onClick={this.handleCreateNewCanvas}>Create New Canvas</button>\n        <button onClick={this.clearCanvas}>Clear Canvas</button>\n        <button onClick={this.nextCAnvas}>Change Red/Black</button>\n        <button onClick={this.saveCanvas}>Save</button>\n        <button onClick={this.loadCanvas}>Load</button>\n        <button onClick={this.exportCanvasDataURL}>Export Data URL</button>\n        <button onClick={this.clearDrawing}>Clear Drawing</button>\n        <button onClick={this.eraseAll}>Erase All</button>\n        <button onClick={this.resetView}>Reset View</button>\n        <button onClick={this.undoDrawing}>Undo</button>\n        <CanvasDraw ref={this.canvasRef} key={canvasKey} />\n      </div>\n    );\n  }\n}\n\nexport default Canvas; \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}