{"ast":null,"code":"var _jsxFileName = \"/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx\";\nimport React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCreateNewCanvas = () => {\n      if (this.canvasRef.current && this.canvasRef.current.props) {\n        const {\n          canvasOpacity\n        } = this.state;\n        this.clearCanvas();\n        this.setState({\n          canvasSaveData: null\n        });\n        console.log();\n        localStorage.removeItem('canvasSaveData');\n\n        // Set the opacity for the new canvas\n        this.setState({\n          canvasOpacity: canvasOpacity\n        }); // Reuse the previous opacity\n      }\n    };\n    this.saveCanvas = () => {\n      if (this.canvasRef.current) {\n        const saveData = this.canvasRef.current.getSaveData();\n        const loadedSaveData = localStorage.getItem('canvasSaveData');\n        const parsedData = JSON.parse(saveData);\n        const loadedData = JSON.parse(loadedSaveData);\n\n        // Check if the loaded data exists and has a newer version\n        if (!loadedData || parsedData.version > loadedData.version) {\n          // Remove the unnecessary properties from parsedData\n          parsedData.lines = parsedData.lines || [];\n          parsedData.objects = [];\n          const modifiedSaveData = JSON.stringify(parsedData);\n          localStorage.setItem('canvasSaveData', modifiedSaveData);\n        }\n      }\n    };\n    this.clearCanvas = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.clear();\n      }\n    };\n    this.nextCanvas = () => {\n      const {\n        brushColor\n      } = this.canvasRef.current.props;\n      if (brushColor === '#444') {\n        this.canvasRef.current.update({\n          brushColor: '#ff0000'\n        });\n      } else {\n        this.canvasRef.current.update({\n          brushColor: '#444'\n        });\n      }\n    };\n    this.loadCanvas = () => {\n      const {\n        drawingData\n      } = this.props;\n      if (drawingData) {\n        this.canvasRef.current.loadSaveData(drawingData, true);\n        this.setState({\n          canvasSaveData: null\n        });\n        localStorage.removeItem('canvasSaveData');\n        this.nextCanvas(); // Call nextCanvas to update brush color\n      }\n    };\n    this.exportCanvasDataURL = () => {\n      if (this.canvasRef.current) {\n        const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n        console.log(dataURL);\n      }\n    };\n    this.clearDrawing = () => {\n      if (this.canvasRef.current) {\n        localStorage.removeItem('canvasSaveData');\n        this.canvasRef.current.clear();\n      }\n    };\n    this.eraseAll = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.eraseAll();\n      }\n    };\n    this.resetView = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.resetView();\n      }\n    };\n    this.undoDrawing = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.undo();\n      }\n    };\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      canvasKey: 0,\n      canvasSaveData: null,\n      canvasOpacity: 0.5\n    };\n  }\n  render() {\n    const {\n      canvasKey\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newone\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Canvas Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleCreateNewCanvas,\n        children: \"Create New Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.nextCAnvas,\n        children: \"Change Red/Black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.saveCanvas,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.loadCanvas,\n        children: \"Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.exportCanvasDataURL,\n        children: \"Export Data URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearDrawing,\n        children: \"Clear Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.eraseAll,\n        children: \"Erase All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetView,\n        children: \"Reset View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.undoDrawing,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n        ref: this.canvasRef\n      }, canvasKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Canvas;","map":{"version":3,"names":["React","Component","CanvasDraw","jsxDEV","_jsxDEV","Canvas","constructor","props","handleCreateNewCanvas","canvasRef","current","canvasOpacity","state","clearCanvas","setState","canvasSaveData","console","log","localStorage","removeItem","saveCanvas","saveData","getSaveData","loadedSaveData","getItem","parsedData","JSON","parse","loadedData","version","lines","objects","modifiedSaveData","stringify","setItem","clear","nextCanvas","brushColor","update","loadCanvas","drawingData","loadSaveData","exportCanvasDataURL","dataURL","getDataURL","clearDrawing","eraseAll","resetView","undoDrawing","undo","createRef","canvasKey","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","nextCAnvas","ref"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\"\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      canvasKey: 0,\n      canvasSaveData: null,\n      canvasOpacity: 0.5\n\n    };\n  }\n\n  handleCreateNewCanvas = () => {\n    if (this.canvasRef.current && this.canvasRef.current.props) {\n      const { canvasOpacity } = this.state;\n\n      this.clearCanvas();\n      this.setState({ canvasSaveData: null });\n      console.log()\n      localStorage.removeItem('canvasSaveData');\n\n      // Set the opacity for the new canvas\n      this.setState({ canvasOpacity: canvasOpacity }); // Reuse the previous opacity\n    }\n  };\n\n  saveCanvas = () => {\n    if (this.canvasRef.current) {\n      const saveData = this.canvasRef.current.getSaveData();\n      const loadedSaveData = localStorage.getItem('canvasSaveData');\n      const parsedData = JSON.parse(saveData);\n      const loadedData = JSON.parse(loadedSaveData);\n\n      // Check if the loaded data exists and has a newer version\n      if (!loadedData || parsedData.version > loadedData.version) {\n        // Remove the unnecessary properties from parsedData\n        parsedData.lines = parsedData.lines || [];\n        parsedData.objects = [];\n\n        const modifiedSaveData = JSON.stringify(parsedData);\n        localStorage.setItem('canvasSaveData', modifiedSaveData);\n      }\n    }\n  };\n\n  clearCanvas = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.clear();\n    }\n  };\n\n  nextCanvas = () => {\n    const { brushColor } = this.canvasRef.current.props;\n\n    if (brushColor === '#444') {\n      this.canvasRef.current.update({ brushColor: '#ff0000' });\n    } else {\n      this.canvasRef.current.update({ brushColor: '#444' });\n    }\n  };\n\n  loadCanvas = () => {\n    const { drawingData } = this.props;\n\n    if (drawingData) {\n      this.canvasRef.current.loadSaveData(drawingData, true);\n      this.setState({ canvasSaveData: null });\n      localStorage.removeItem('canvasSaveData');\n      this.nextCanvas(); // Call nextCanvas to update brush color\n    }\n  };\n\n  exportCanvasDataURL = () => {\n    if (this.canvasRef.current) {\n      const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n      console.log(dataURL);\n    }\n  };\n\n  clearDrawing = () => {\n    if (this.canvasRef.current) {\n      localStorage.removeItem('canvasSaveData');\n      this.canvasRef.current.clear();\n    }\n  };\n\n  eraseAll = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.eraseAll();\n    }\n  };\n\n  resetView = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.resetView();\n    }\n  };\n\n  undoDrawing = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.undo();\n    }\n  };\n\n  render() {\n    const { canvasKey } = this.state;\n\n    return (\n      <div className='newone'>\n        <h1>Canvas Component</h1>\n        \n        <button onClick={this.handleCreateNewCanvas}>Create New Canvas</button>\n        <button onClick={this.clearCanvas}>Clear Canvas</button>\n        <button onClick={this.nextCAnvas}>Change Red/Black</button>\n        <button onClick={this.saveCanvas}>Save</button>\n        <button onClick={this.loadCanvas}>Load</button>\n        <button onClick={this.exportCanvasDataURL}>Export Data URL</button>\n        <button onClick={this.clearDrawing}>Clear Drawing</button>\n        <button onClick={this.eraseAll}>Erase All</button>\n        <button onClick={this.resetView}>Reset View</button>\n        <button onClick={this.undoDrawing}>Undo</button>\n        <CanvasDraw ref={this.canvasRef} key={canvasKey} />\n      </div>\n    );\n  }\n}\n\nexport default Canvas; \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}