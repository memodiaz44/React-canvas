{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nfunction Canvas() {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [width, setWidth] = useState(400);\n  const [savedImageData, setSavedImageData] = useState('');\n  const imageRef = useRef(null);\n  const startDrawing = e => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const {\n      offsetX,\n      offsetY\n    } = e.nativeEvent;\n    ctx.beginPath();\n    ctx.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n  const draw = e => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const {\n      offsetX,\n      offsetY\n    } = e.nativeEvent;\n    ctx.lineTo(offsetX, offsetY);\n    ctx.stroke();\n  };\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  };\n  const saveD = e => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const dataURL = canvas.toDataURL(); // Save canvas as data URL\n      console.log(dataURL);\n      imageRef.current.src = dataURL;\n    }\n  };\n  const retrieveOffsetData = () => {\n    const offsetDataString = localStorage.getItem('offsetData');\n    if (offsetDataString !== null) {\n      const offsetData = JSON.parse(offsetDataString);\n      console.log('Retrieved offset data:', offsetData);\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Clear the canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Redraw the offset data on the canvas\n      ctx.beginPath();\n      ctx.moveTo(offsetData.startX, offsetData.startY);\n      ctx.lineTo(offsetData.endX, offsetData.endY);\n      ctx.stroke();\n      return offsetData;\n    } else {\n      console.log('No offset data found in localStorage.');\n      return null;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const canvas = canvasRef.current;\n    const drawingData = canvas.toDataURL(); // Convert canvas to data URL\n\n    fetch('/api/save-drawing', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        drawingData\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  const handleIncreaseWidth = () => {\n    const canvas = canvasRef.current;\n    if (canvasRef.current) {\n      console.log(canvasRef.current.getContext);\n    }\n    const ctx = canvas.getContext('2d');\n\n    // Get the current drawing content\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n    // Increase the canvas width\n    const newWidth = width + 400;\n    setWidth(newWidth);\n\n    // Resize the canvas\n    canvas.width = newWidth;\n\n    // Redraw the content on the resized canvas\n    ctx.putImageData(imageData, 0, 0);\n  };\n  const jumpAcross = () => {\n    const canvasContainer = canvasRef.current.parentNode;\n    if (canvasContainer) {\n      canvasContainer.scrollLeft += 400;\n    }\n  };\n  const jumpABack = () => {\n    const canvasContainer = canvasRef.current.parentNode;\n    if (canvasContainer) {\n      canvasContainer.scrollLeft -= 400;\n    }\n  };\n}\n_s(Canvas, \"h0ffUmCipj35TT8NEnc97AIh41A=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useRef","Canvas","_s","canvasRef","isDrawing","setIsDrawing","width","setWidth","savedImageData","setSavedImageData","imageRef","startDrawing","e","canvas","current","ctx","getContext","offsetX","offsetY","nativeEvent","beginPath","moveTo","draw","lineTo","stroke","stopDrawing","saveD","dataURL","toDataURL","console","log","src","retrieveOffsetData","offsetDataString","localStorage","getItem","offsetData","JSON","parse","clearRect","height","startX","startY","endX","endY","handleSubmit","preventDefault","drawingData","fetch","method","headers","body","stringify","then","response","json","data","catch","error","handleIncreaseWidth","imageData","getImageData","newWidth","putImageData","jumpAcross","canvasContainer","parentNode","scrollLeft","jumpABack","_c","$RefreshReg$"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nfunction Canvas() {\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [width, setWidth] = useState(400);\n  const [savedImageData, setSavedImageData] = useState('');\n\n  const imageRef = useRef(null);\n\n\n  const startDrawing = (e) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const { offsetX, offsetY } = e.nativeEvent;\n\n    ctx.beginPath();\n    ctx.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const draw = (e) => {\n    if (!isDrawing) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const { offsetX, offsetY } = e.nativeEvent;\n\n    ctx.lineTo(offsetX, offsetY);\n    ctx.stroke();\n  };\n\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  };\n\n  const saveD = (e) => {\n    if (canvasRef.current) {\n      const canvas = canvasRef.current;\n      const dataURL = canvas.toDataURL(); // Save canvas as data URL\n      console.log(dataURL);\n      imageRef.current.src = dataURL;\n    }\n  };\n  \n  const retrieveOffsetData = () => {\n    const offsetDataString = localStorage.getItem('offsetData');\n    if (offsetDataString !== null) {\n      const offsetData = JSON.parse(offsetDataString);\n      console.log('Retrieved offset data:', offsetData);\n      \n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      \n      // Clear the canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      // Redraw the offset data on the canvas\n      ctx.beginPath();\n      ctx.moveTo(offsetData.startX, offsetData.startY);\n      ctx.lineTo(offsetData.endX, offsetData.endY);\n      ctx.stroke();\n      \n      return offsetData;\n    } else {\n      console.log('No offset data found in localStorage.');\n      return null;\n    }\n  }\n  \n  \n  \n  \n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const canvas = canvasRef.current;\n    const drawingData = canvas.toDataURL(); // Convert canvas to data URL\n\n    fetch('/api/save-drawing', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ drawingData }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  const handleIncreaseWidth = () => {\n    const canvas = canvasRef.current;\n    if(canvasRef.current){\n      console.log(canvasRef.current.getContext)\n    }\n    const ctx = canvas.getContext('2d');\n  \n    // Get the current drawing content\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  \n    // Increase the canvas width\n    const newWidth = width + 400;\n    setWidth(newWidth);\n  \n    // Resize the canvas\n    canvas.width = newWidth;\n  \n    // Redraw the content on the resized canvas\n    ctx.putImageData(imageData, 0, 0);\n  };\n  \n\n  const jumpAcross = () => {\n    const canvasContainer = canvasRef.current.parentNode;\n    if (canvasContainer) {\n      canvasContainer.scrollLeft += 400;\n    }\n  };\n\n  const jumpABack = () => {\n    const canvasContainer = canvasRef.current.parentNode;\n    if (canvasContainer) {\n      canvasContainer.scrollLeft -= 400;\n    }\n  };\n\n  \n}\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}