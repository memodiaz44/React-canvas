{"ast":null,"code":"var _jsxFileName = \"/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx\";\nimport React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCreateNewCanvas = () => {\n      // Make the drawing content transparent\n      const saveData = localStorage.getItem('canvasSaveData');\n      if (saveData) {\n        const parsedData = JSON.parse(saveData);\n        let brushColor = parsedData.lines[0].brushColor;\n        if (brushColor === \"#444\") {\n          parsedData.lines[0].brushColor = \"grey\";\n        }\n        const modifiedSaveData = JSON.stringify(parsedData);\n        console.log(modifiedSaveData);\n\n        // Clear the previous canvas data from localStorage\n        localStorage.removeItem('canvasSaveData');\n\n        // Save the new drawing data\n        localStorage.setItem('canvasSaveData', modifiedSaveData);\n        this.canvasRef.current.loadSaveData(modifiedSaveData, true);\n      }\n    };\n    this.clearCanvas = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.clear();\n      }\n    };\n    this.nextCAnvas = () => {\n      const {\n        brushColor\n      } = this.canvasRef.current.props;\n      if (brushColor === '#444') {\n        this.canvasRef.current.update({\n          brushColor: '#ff0000'\n        });\n      } else {\n        this.canvasRef.current.update({\n          brushColor: '#444'\n        });\n      }\n    };\n    this.saveCanvas = () => {\n      if (this.canvasRef.current) {\n        const brushColor = this.canvasRef.current.props.brushColor;\n\n        // Check if the brush color is gray\n        if (brushColor === 'grey') {\n          console.log('Skipping saving canvas with gray color');\n          return; // Skip saving\n        }\n\n        const saveData = this.canvasRef.current.getSaveData();\n\n        // Remove the previously saved canvas data\n        localStorage.removeItem('canvasSaveData');\n        localStorage.setItem('canvasSaveData', saveData);\n      }\n    };\n    this.loadCanvas = () => {\n      const saveData = localStorage.getItem('canvasSaveData');\n      if (saveData) {\n        this.canvasRef.current.loadSaveData(saveData, true);\n      }\n    };\n    this.exportCanvasDataURL = () => {\n      if (this.canvasRef.current) {\n        const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n        console.log(dataURL);\n      }\n    };\n    this.clearDrawing = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.clear();\n      }\n    };\n    this.eraseAll = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.eraseAll();\n      }\n    };\n    this.resetView = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.resetView();\n      }\n    };\n    this.undoDrawing = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.undo();\n      }\n    };\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      canvasKey: 0\n    };\n  }\n  render() {\n    const {\n      canvasKey\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newone\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Canvas Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleCreateNewCanvas,\n        children: \"Create New Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.nextCAnvas,\n        children: \"Change Red/Black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.saveCanvas,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.loadCanvas,\n        children: \"Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.exportCanvasDataURL,\n        children: \"Export Data URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearDrawing,\n        children: \"Clear Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.eraseAll,\n        children: \"Erase All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetView,\n        children: \"Reset View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.undoDrawing,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n        ref: this.canvasRef\n      }, canvasKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Canvas;","map":{"version":3,"names":["React","Component","CanvasDraw","jsxDEV","_jsxDEV","Canvas","constructor","props","handleCreateNewCanvas","saveData","localStorage","getItem","parsedData","JSON","parse","brushColor","lines","modifiedSaveData","stringify","console","log","removeItem","setItem","canvasRef","current","loadSaveData","clearCanvas","clear","nextCAnvas","update","saveCanvas","getSaveData","loadCanvas","exportCanvasDataURL","dataURL","getDataURL","clearDrawing","eraseAll","resetView","undoDrawing","undo","createRef","state","canvasKey","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\"\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      canvasKey: 0\n    };\n  }\n\n  handleCreateNewCanvas = () => {\n    // Make the drawing content transparent\n    const saveData = localStorage.getItem('canvasSaveData');\n    if (saveData) {\n      const parsedData = JSON.parse(saveData);\n      let brushColor = parsedData.lines[0].brushColor;\n      if (brushColor === \"#444\") {\n        parsedData.lines[0].brushColor = \"grey\";\n      }\n      const modifiedSaveData = JSON.stringify(parsedData);\n      console.log(modifiedSaveData);\n  \n      // Clear the previous canvas data from localStorage\n      localStorage.removeItem('canvasSaveData');\n  \n      // Save the new drawing data\n      localStorage.setItem('canvasSaveData', modifiedSaveData);\n  \n      this.canvasRef.current.loadSaveData(modifiedSaveData, true);\n    }\n  };\n  \n  \n  \n  clearCanvas = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.clear();\n    }\n  };\n\n  nextCAnvas = () => {\n    const { brushColor } = this.canvasRef.current.props;\n\n    if (brushColor === '#444') {\n      this.canvasRef.current.update({ brushColor: '#ff0000' });\n    } else {\n      this.canvasRef.current.update({ brushColor: '#444' });\n    } \n  };\n\n  saveCanvas = () => {\n    if (this.canvasRef.current) {\n      const brushColor = this.canvasRef.current.props.brushColor;\n  \n      // Check if the brush color is gray\n      if (brushColor === 'grey') {\n        console.log('Skipping saving canvas with gray color');\n        return; // Skip saving\n      }\n  \n      const saveData = this.canvasRef.current.getSaveData();\n  \n      // Remove the previously saved canvas data\n      localStorage.removeItem('canvasSaveData');\n  \n      localStorage.setItem('canvasSaveData', saveData);\n    }\n  };\n  \n  \n  \n  \n\n  loadCanvas = () => {\n    const saveData = localStorage.getItem('canvasSaveData');\n    if (saveData) {\n      this.canvasRef.current.loadSaveData(saveData, true);\n    }\n  };\n\n  exportCanvasDataURL = () => {\n    if (this.canvasRef.current) {\n      const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n      console.log(dataURL);\n    }\n  };\n\n  clearDrawing = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.clear();\n    }\n  };\n\n  eraseAll = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.eraseAll();\n    }\n  };\n\n  resetView = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.resetView();\n    }\n  };\n\n  undoDrawing = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.undo();\n    }\n  };\n\n  render() {\n    const { canvasKey } = this.state;\n\n    return (\n      <div className='newone'>\n        <h1>Canvas Component</h1>\n        \n        <button onClick={this.handleCreateNewCanvas}>Create New Canvas</button>\n        <button onClick={this.clearCanvas}>Clear Canvas</button>\n        <button onClick={this.nextCAnvas}>Change Red/Black</button>\n        <button onClick={this.saveCanvas}>Save</button>\n        <button onClick={this.loadCanvas}>Load</button>\n        <button onClick={this.exportCanvasDataURL}>Export Data URL</button>\n        <button onClick={this.clearDrawing}>Clear Drawing</button>\n        <button onClick={this.eraseAll}>Erase All</button>\n        <button onClick={this.resetView}>Reset View</button>\n        <button onClick={this.undoDrawing}>Undo</button>\n        <CanvasDraw ref={this.canvasRef} key={canvasKey} />\n      </div>\n    );\n  }\n}\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}