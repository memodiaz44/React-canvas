{"ast":null,"code":"var _jsxFileName = \"/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx\";\nimport React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCreateNewCanvas = () => {\n      // Make the drawing content transparent\n      const saveData = localStorage.getItem('canvasSaveData');\n      if (saveData) {\n        const parsedData = JSON.parse(saveData);\n        let brushColor = parsedData.lines[0].brushColor;\n        if (brushColor === \"#444\") {\n          parsedData.lines[0].brushColor = \"grey\";\n        }\n        const modifiedSaveData = JSON.stringify(parsedData);\n        console.log(modifiedSaveData);\n        localStorage.setItem(\"canvasSaveData\", modifiedSaveData);\n        this.canvasRef.current.loadSaveData(modifiedSaveData, true);\n      }\n    };\n    this.saveCanvas = () => {\n      if (this.canvasRef.current) {\n        const currentSaveData = this.canvasRef.current.getSaveData();\n        const loadedSaveData = localStorage.getItem('canvasSaveData');\n        if (loadedSaveData) {\n          const parsedCurrentData = JSON.parse(currentSaveData);\n          const parsedLoadedData = JSON.parse(loadedSaveData);\n\n          // Remove the unnecessary properties from parsedCurrentData\n          parsedCurrentData.lines = parsedCurrentData.lines || [];\n          parsedCurrentData.objects = [];\n\n          // Check if the current data has newer changes\n          if (parsedCurrentData.version > parsedLoadedData.version) {\n            const modifiedSaveData = JSON.stringify(parsedCurrentData);\n            localStorage.setItem('canvasSaveData', modifiedSaveData);\n          }\n        } else {\n          localStorage.setItem('canvasSaveData', currentSaveData);\n        }\n      }\n    };\n    this.clearCanvas = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.clear();\n      }\n    };\n    this.nextCanvas = () => {\n      const {\n        brushColor\n      } = this.canvasRef.current.props;\n      if (brushColor === '#444') {\n        this.canvasRef.current.update({\n          brushColor: '#ff0000'\n        });\n      } else {\n        this.canvasRef.current.update({\n          brushColor: '#444'\n        });\n      }\n    };\n    this.loadCanvas = () => {\n      const {\n        drawingData\n      } = this.props;\n      if (drawingData) {\n        this.canvasRef.current.loadSaveData(drawingData, true);\n        this.setState({\n          canvasSaveData: null\n        });\n        localStorage.removeItem('canvasSaveData');\n        this.nextCanvas(); // Call nextCanvas to update brush color\n      }\n    };\n    this.exportCanvasDataURL = () => {\n      if (this.canvasRef.current) {\n        const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n        console.log(dataURL);\n      }\n    };\n    this.clearDrawing = () => {\n      if (this.canvasRef.current) {\n        localStorage.removeItem('canvasSaveData');\n        this.canvasRef.current.clear();\n      }\n    };\n    this.eraseAll = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.eraseAll();\n      }\n    };\n    this.resetView = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.resetView();\n      }\n    };\n    this.undoDrawing = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.undo();\n      }\n    };\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      canvasKey: 0,\n      canvasSaveData: null,\n      canvasOpacity: 0.8\n    };\n  }\n  render() {\n    const {\n      canvasKey\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newone\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Canvas Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleCreateNewCanvas,\n        children: \"Create New Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.nextCAnvas,\n        children: \"Change Red/Black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.saveCanvas,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.loadCanvas,\n        children: \"Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.exportCanvasDataURL,\n        children: \"Export Data URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearDrawing,\n        children: \"Clear Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.eraseAll,\n        children: \"Erase All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetView,\n        children: \"Reset View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.undoDrawing,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n        ref: this.canvasRef\n      }, canvasKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Canvas;","map":{"version":3,"names":["React","Component","CanvasDraw","jsxDEV","_jsxDEV","Canvas","constructor","props","handleCreateNewCanvas","saveData","localStorage","getItem","parsedData","JSON","parse","brushColor","lines","modifiedSaveData","stringify","console","log","setItem","canvasRef","current","loadSaveData","saveCanvas","currentSaveData","getSaveData","loadedSaveData","parsedCurrentData","parsedLoadedData","objects","version","clearCanvas","clear","nextCanvas","update","loadCanvas","drawingData","setState","canvasSaveData","removeItem","exportCanvasDataURL","dataURL","getDataURL","clearDrawing","eraseAll","resetView","undoDrawing","undo","createRef","state","canvasKey","canvasOpacity","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","nextCAnvas","ref"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\"\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      canvasKey: 0,\n      canvasSaveData: null,\n      canvasOpacity:  0.8\n\n    };\n  }\n\n  handleCreateNewCanvas = () => {\n    // Make the drawing content transparent\n    const saveData = localStorage.getItem('canvasSaveData');\n    if (saveData) {\n      const parsedData = JSON.parse(saveData);\n      let brushColor = parsedData.lines[0].brushColor;\n      if (brushColor === \"#444\") {\n        parsedData.lines[0].brushColor = \"grey\";\n      }\n      const modifiedSaveData = JSON.stringify(parsedData);\n      console.log(modifiedSaveData)\n      localStorage.setItem(\"canvasSaveData\", modifiedSaveData);\n  \n      this.canvasRef.current.loadSaveData(modifiedSaveData, true);\n    }\n  };\n  saveCanvas = () => {\n    if (this.canvasRef.current) {\n      const currentSaveData = this.canvasRef.current.getSaveData();\n      const loadedSaveData = localStorage.getItem('canvasSaveData');\n  \n      if (loadedSaveData) {\n        const parsedCurrentData = JSON.parse(currentSaveData);\n        const parsedLoadedData = JSON.parse(loadedSaveData);\n        \n        // Remove the unnecessary properties from parsedCurrentData\n        parsedCurrentData.lines = parsedCurrentData.lines || [];\n        parsedCurrentData.objects = [];\n  \n        // Check if the current data has newer changes\n        if (parsedCurrentData.version > parsedLoadedData.version) {\n          const modifiedSaveData = JSON.stringify(parsedCurrentData);\n          localStorage.setItem('canvasSaveData', modifiedSaveData);\n        }\n      } else {\n        localStorage.setItem('canvasSaveData', currentSaveData);\n      }\n    }\n  };\n  \n  \n  clearCanvas = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.clear();\n    }\n  };\n\n  nextCanvas = () => {\n    const { brushColor } = this.canvasRef.current.props;\n\n    if (brushColor === '#444') {\n      this.canvasRef.current.update({ brushColor: '#ff0000' });\n    } else {\n      this.canvasRef.current.update({ brushColor: '#444' });\n    }\n  };\n\n  loadCanvas = () => {\n    const { drawingData } = this.props;\n\n    if (drawingData) {\n      this.canvasRef.current.loadSaveData(drawingData, true);\n      this.setState({ canvasSaveData: null });\n      localStorage.removeItem('canvasSaveData');\n      this.nextCanvas(); // Call nextCanvas to update brush color\n    }\n  };\n\n  exportCanvasDataURL = () => {\n    if (this.canvasRef.current) {\n      const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n      console.log(dataURL);\n    }\n  };\n\n  clearDrawing = () => {\n    if (this.canvasRef.current) {\n      localStorage.removeItem('canvasSaveData');\n      this.canvasRef.current.clear();\n    }\n  };\n\n  eraseAll = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.eraseAll();\n    }\n  };\n\n  resetView = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.resetView();\n    }\n  };\n\n  undoDrawing = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.undo();\n    }\n  };\n\n  render() {\n    const { canvasKey } = this.state;\n\n    return (\n      <div className='newone'>\n        <h1>Canvas Component</h1>\n        \n        <button onClick={this.handleCreateNewCanvas}>Create New Canvas</button>\n        <button onClick={this.clearCanvas}>Clear Canvas</button>\n        <button onClick={this.nextCAnvas}>Change Red/Black</button>\n        <button onClick={this.saveCanvas}>Save</button>\n        <button onClick={this.loadCanvas}>Load</button>\n        <button onClick={this.exportCanvasDataURL}>Export Data URL</button>\n        <button onClick={this.clearDrawing}>Clear Drawing</button>\n        <button onClick={this.eraseAll}>Erase All</button>\n        <button onClick={this.resetView}>Reset View</button>\n        <button onClick={this.undoDrawing}>Undo</button>\n        <CanvasDraw ref={this.canvasRef} key={canvasKey} />\n      </div>\n    );\n  }\n}\n\nexport default Canvas; \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}