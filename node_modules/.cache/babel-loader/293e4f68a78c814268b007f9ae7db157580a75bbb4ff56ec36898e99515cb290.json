{"ast":null,"code":"var _jsxFileName = \"/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx\";\nimport React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCreateNewCanvas = () => {\n      // Make the drawing content transparent\n      const saveData = localStorage.getItem('canvasSaveData');\n      if (saveData) {\n        const parsedData = JSON.parse(saveData);\n        const lines = parsedData.lines || [];\n\n        // Check if the first line exists and has the brush color #444\n        if (lines.length > 0 && lines[0].brushColor === '#444') {\n          lines[0].brushColor = 'grey';\n          parsedData.lines = lines;\n          const modifiedSaveData = JSON.stringify(parsedData);\n          localStorage.setItem('canvasSaveData', modifiedSaveData);\n          this.setState({\n            canvasSaveData: modifiedSaveData\n          }); // Update the canvas data in state\n          this.canvasRef.current.loadSaveData(modifiedSaveData, true);\n        }\n      }\n    };\n    this.clearCanvas = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.clear();\n      }\n    };\n    this.nextCAnvas = () => {\n      const {\n        brushColor\n      } = this.canvasRef.current.props;\n      if (brushColor === '#444') {\n        this.canvasRef.current.update({\n          brushColor: '#ff0000'\n        });\n      } else {\n        this.canvasRef.current.update({\n          brushColor: '#444'\n        });\n      }\n    };\n    this.saveCanvas = () => {\n      if (this.canvasRef.current) {\n        const saveData = this.canvasRef.current.getSaveData();\n        const loadedSaveData = localStorage.getItem('canvasSaveData');\n        const parsedData = JSON.parse(saveData);\n        let loadedData = JSON.parse(loadedSaveData);\n\n        // Check if the loaded data exists and has a newer version\n        if (!loadedData || parsedData.version > loadedData.version) {\n          // Remove the unnecessary properties from parsedData\n          parsedData.lines = parsedData.lines || [];\n          parsedData.objects = [];\n\n          // Update the version of the loaded data\n          loadedData = {\n            ...parsedData,\n            version: parsedData.version\n          };\n          const modifiedSaveData = JSON.stringify(parsedData);\n          localStorage.setItem('canvasSaveData', modifiedSaveData);\n        }\n      }\n    };\n    this.loadCanvas = () => {\n      const saveData = localStorage.getItem('canvasSaveData');\n      if (saveData) {\n        this.setState({\n          canvasSaveData: saveData\n        }); // Update the canvas data in state\n        this.canvasRef.current.loadSaveData(saveData, true);\n      }\n    };\n    this.exportCanvasDataURL = () => {\n      if (this.canvasRef.current) {\n        const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n        console.log(dataURL);\n      }\n    };\n    this.clearDrawing = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.clear();\n      }\n    };\n    this.eraseAll = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.eraseAll();\n      }\n    };\n    this.resetView = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.resetView();\n      }\n    };\n    this.undoDrawing = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.undo();\n      }\n    };\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      canvasKey: 0,\n      canvasSaveData: null\n    };\n  }\n  render() {\n    const {\n      canvasKey\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newone\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Canvas Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleCreateNewCanvas,\n        children: \"Create New Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.nextCAnvas,\n        children: \"Change Red/Black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.saveCanvas,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.loadCanvas,\n        children: \"Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.exportCanvasDataURL,\n        children: \"Export Data URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearDrawing,\n        children: \"Clear Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.eraseAll,\n        children: \"Erase All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetView,\n        children: \"Reset View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.undoDrawing,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n        ref: this.canvasRef\n      }, canvasKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Canvas;","map":{"version":3,"names":["React","Component","CanvasDraw","jsxDEV","_jsxDEV","Canvas","constructor","props","handleCreateNewCanvas","saveData","localStorage","getItem","parsedData","JSON","parse","lines","length","brushColor","modifiedSaveData","stringify","setItem","setState","canvasSaveData","canvasRef","current","loadSaveData","clearCanvas","clear","nextCAnvas","update","saveCanvas","getSaveData","loadedSaveData","loadedData","version","objects","loadCanvas","exportCanvasDataURL","dataURL","getDataURL","console","log","clearDrawing","eraseAll","resetView","undoDrawing","undo","createRef","state","canvasKey","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\"\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      canvasKey: 0,\n      canvasSaveData: null\n    };\n  }\n\n  handleCreateNewCanvas = () => {\n    // Make the drawing content transparent\n    const saveData = localStorage.getItem('canvasSaveData');\n    if (saveData) {\n      const parsedData = JSON.parse(saveData);\n      const lines = parsedData.lines || [];\n  \n      // Check if the first line exists and has the brush color #444\n      if (lines.length > 0 && lines[0].brushColor === '#444') {\n        lines[0].brushColor = 'grey';\n        parsedData.lines = lines;\n        const modifiedSaveData = JSON.stringify(parsedData);\n        localStorage.setItem('canvasSaveData', modifiedSaveData);\n        this.setState({ canvasSaveData: modifiedSaveData }); // Update the canvas data in state\n        this.canvasRef.current.loadSaveData(modifiedSaveData, true);\n      }\n    }\n  };\n  \n  \n  \n  \n  clearCanvas = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.clear();\n    }\n  };\n\n  nextCAnvas = () => {\n    const { brushColor } = this.canvasRef.current.props;\n\n    if (brushColor === '#444') {\n      this.canvasRef.current.update({ brushColor: '#ff0000' });\n    } else {\n      this.canvasRef.current.update({ brushColor: '#444' });\n    } \n  };\n\n  saveCanvas = () => {\n    if (this.canvasRef.current) {\n      const saveData = this.canvasRef.current.getSaveData();\n      const loadedSaveData = localStorage.getItem('canvasSaveData');\n      const parsedData = JSON.parse(saveData);\n      let loadedData = JSON.parse(loadedSaveData);\n  \n      // Check if the loaded data exists and has a newer version\n      if (!loadedData || parsedData.version > loadedData.version) {\n        // Remove the unnecessary properties from parsedData\n        parsedData.lines = parsedData.lines || [];\n        parsedData.objects = [];\n  \n        // Update the version of the loaded data\n        loadedData = {\n          ...parsedData,\n          version: parsedData.version,\n        };\n  \n        const modifiedSaveData = JSON.stringify(parsedData);\n        localStorage.setItem('canvasSaveData', modifiedSaveData);\n      }\n    }\n  };\n  \n  \n  loadCanvas = () => {\n    const saveData = localStorage.getItem('canvasSaveData');\n    if (saveData) {\n      this.setState({ canvasSaveData: saveData }); // Update the canvas data in state\n      this.canvasRef.current.loadSaveData(saveData, true);\n    }\n  };\n\n  \n  \n\n\n\n  exportCanvasDataURL = () => {\n    if (this.canvasRef.current) {\n      const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n      console.log(dataURL);\n    }\n  };\n\n  clearDrawing = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.clear();\n    }\n  };\n\n  eraseAll = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.eraseAll();\n    }\n  };\n\n  resetView = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.resetView();\n    }\n  };\n\n  undoDrawing = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.undo();\n    }\n  };\n\n  render() {\n    const { canvasKey } = this.state;\n\n    return (\n      <div className='newone'>\n        <h1>Canvas Component</h1>\n        \n        <button onClick={this.handleCreateNewCanvas}>Create New Canvas</button>\n        <button onClick={this.clearCanvas}>Clear Canvas</button>\n        <button onClick={this.nextCAnvas}>Change Red/Black</button>\n        <button onClick={this.saveCanvas}>Save</button>\n        <button onClick={this.loadCanvas}>Load</button>\n        <button onClick={this.exportCanvasDataURL}>Export Data URL</button>\n        <button onClick={this.clearDrawing}>Clear Drawing</button>\n        <button onClick={this.eraseAll}>Erase All</button>\n        <button onClick={this.resetView}>Reset View</button>\n        <button onClick={this.undoDrawing}>Undo</button>\n        <CanvasDraw ref={this.canvasRef} key={canvasKey} />\n      </div>\n    );\n  }\n}\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}