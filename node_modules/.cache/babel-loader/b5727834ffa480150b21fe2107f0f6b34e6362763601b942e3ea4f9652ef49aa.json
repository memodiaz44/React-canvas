{"ast":null,"code":"var _jsxFileName = \"/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx\";\nimport React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCreateNewCanvas = () => {\n      // Load the last saved canvas from localStorage\n      const savedCanvas = localStorage.getItem('canvasProps');\n      if (savedCanvas) {\n        const canvasProps = JSON.parse(savedCanvas);\n\n        // Set the canvas key to trigger re-render and load the saved canvas\n        this.setState(prevState => ({\n          canvasKey: prevState.canvasKey + 1\n        }));\n\n        // Make the drawing content transparent\n        canvasProps.saveData = canvasProps.saveData.replace(/#([0-9A-F]{2}){3}\\b/gi, '#$1$1$1$1');\n\n        // Save the modified canvas props back to localStorage\n        localStorage.setItem('canvasProps', JSON.stringify(canvasProps));\n      } else {\n        // If no saved canvas exists, simply create a new canvas\n        this.setState(prevState => ({\n          canvasKey: prevState.canvasKey + 1\n        }));\n      }\n    };\n    this.clearCanvas = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.clear();\n      }\n    };\n    this.nextCAnvas = () => {\n      const {\n        brushColor\n      } = this.canvasRef.current.props;\n      if (brushColor === '#444') {\n        this.canvasRef.current.update({\n          brushColor: '#ff0000'\n        });\n      } else {\n        this.canvasRef.current.update({\n          brushColor: '#444'\n        });\n      }\n    };\n    this.saveCanvas = () => {\n      if (this.canvasRef.current) {\n        const saveData = this.canvasRef.current.getSaveData();\n        localStorage.setItem('canvasSaveData', saveData);\n      }\n    };\n    this.loadCanvas = () => {\n      const saveData = localStorage.getItem('canvasSaveData');\n      if (saveData) {\n        this.canvasRef.current.loadSaveData(saveData, true);\n      }\n    };\n    this.exportCanvasDataURL = () => {\n      if (this.canvasRef.current) {\n        const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n        console.log(dataURL);\n      }\n    };\n    this.clearDrawing = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.clear();\n      }\n    };\n    this.eraseAll = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.eraseAll();\n      }\n    };\n    this.resetView = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.resetView();\n      }\n    };\n    this.undoDrawing = () => {\n      if (this.canvasRef.current) {\n        this.canvasRef.current.undo();\n      }\n    };\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      canvasKey: 0\n    };\n  }\n  render() {\n    const {\n      canvasKey\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newone\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Canvas Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleCreateNewCanvas,\n        children: \"Create New Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearCanvas,\n        children: \"Clear Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.nextCAnvas,\n        children: \"Change Red/Black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.saveCanvas,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.loadCanvas,\n        children: \"Load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.exportCanvasDataURL,\n        children: \"Export Data URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clearDrawing,\n        children: \"Clear Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.eraseAll,\n        children: \"Erase All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.resetView,\n        children: \"Reset View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.undoDrawing,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n        ref: this.canvasRef\n      }, canvasKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Canvas;","map":{"version":3,"names":["React","Component","CanvasDraw","jsxDEV","_jsxDEV","Canvas","constructor","props","handleCreateNewCanvas","savedCanvas","localStorage","getItem","canvasProps","JSON","parse","setState","prevState","canvasKey","saveData","replace","setItem","stringify","clearCanvas","canvasRef","current","clear","nextCAnvas","brushColor","update","saveCanvas","getSaveData","loadCanvas","loadSaveData","exportCanvasDataURL","dataURL","getDataURL","console","log","clearDrawing","eraseAll","resetView","undoDrawing","undo","createRef","state","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport \"../styles/canvas.css\"\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      canvasKey: 0\n    };\n  }\n\n  handleCreateNewCanvas = () => {\n    // Load the last saved canvas from localStorage\n    const savedCanvas = localStorage.getItem('canvasProps');\n    if (savedCanvas) {\n      const canvasProps = JSON.parse(savedCanvas);\n      \n      // Set the canvas key to trigger re-render and load the saved canvas\n      this.setState((prevState) => ({\n        canvasKey: prevState.canvasKey + 1\n      }));\n      \n      // Make the drawing content transparent\n      canvasProps.saveData = canvasProps.saveData.replace(/#([0-9A-F]{2}){3}\\b/gi, '#$1$1$1$1');\n      \n      // Save the modified canvas props back to localStorage\n      localStorage.setItem('canvasProps', JSON.stringify(canvasProps));\n    } else {\n      // If no saved canvas exists, simply create a new canvas\n      this.setState((prevState) => ({\n        canvasKey: prevState.canvasKey + 1\n      }));\n    }\n  };\n  \n\n  clearCanvas = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.clear();\n    }\n  };\n\n  nextCAnvas = () => {\n    const { brushColor } = this.canvasRef.current.props;\n\n    if (brushColor === '#444') {\n      this.canvasRef.current.update({ brushColor: '#ff0000' });\n    } else {\n      this.canvasRef.current.update({ brushColor: '#444' });\n    }\n  };\n\n  saveCanvas = () => {\n    if (this.canvasRef.current) {\n      const saveData = this.canvasRef.current.getSaveData();\n      localStorage.setItem('canvasSaveData', saveData);\n    }\n  };\n\n  loadCanvas = () => {\n    const saveData = localStorage.getItem('canvasSaveData');\n    if (saveData) {\n      this.canvasRef.current.loadSaveData(saveData, true);\n    }\n  };\n\n  exportCanvasDataURL = () => {\n    if (this.canvasRef.current) {\n      const dataURL = this.canvasRef.current.getDataURL('image/png', false, '#ffffff');\n      console.log(dataURL);\n    }\n  };\n\n  clearDrawing = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.clear();\n    }\n  };\n\n  eraseAll = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.eraseAll();\n    }\n  };\n\n  resetView = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.resetView();\n    }\n  };\n\n  undoDrawing = () => {\n    if (this.canvasRef.current) {\n      this.canvasRef.current.undo();\n    }\n  };\n\n  render() {\n    const { canvasKey } = this.state;\n\n    return (\n      <div className='newone'>\n        <h1>Canvas Component</h1>\n        \n        <button onClick={this.handleCreateNewCanvas}>Create New Canvas</button>\n        <button onClick={this.clearCanvas}>Clear Canvas</button>\n        <button onClick={this.nextCAnvas}>Change Red/Black</button>\n        <button onClick={this.saveCanvas}>Save</button>\n        <button onClick={this.loadCanvas}>Load</button>\n        <button onClick={this.exportCanvasDataURL}>Export Data URL</button>\n        <button onClick={this.clearDrawing}>Clear Drawing</button>\n        <button onClick={this.eraseAll}>Erase All</button>\n        <button onClick={this.resetView}>Reset View</button>\n        <button onClick={this.undoDrawing}>Undo</button>\n        <CanvasDraw ref={this.canvasRef} key={canvasKey} />\n      </div>\n    );\n  }\n}\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}