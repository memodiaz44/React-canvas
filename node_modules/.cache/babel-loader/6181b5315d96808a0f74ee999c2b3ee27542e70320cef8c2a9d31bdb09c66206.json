{"ast":null,"code":"var _jsxFileName = \"/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [canvasKey, setCanvasKey] = useState(0);\n  const handleCreateNewCanvas = () => {\n    setCanvasKey(prevKey => prevKey + 1);\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current.canvas.drawing;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvasRef.current.clear();\n  };\n  const nextCAnvas = () => {\n    const val = canvasRef.current.props.brushColor;\n    if (canvasRef.current.props.brushColor == '#444') {\n      brushColor: '#ff0000'; // Update to the new brush color\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Canvas Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateNewCanvas,\n      children: \"Create New Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearCanvas,\n      children: \"Clear Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextCAnvas,\n      children: \"get canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n      ref: canvasRef\n    }, canvasKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"cQGgtP80E3VgkgqqBW31tRuUbEk=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useState","CanvasDraw","jsxDEV","_jsxDEV","Canvas","_s","canvasRef","canvasKey","setCanvasKey","handleCreateNewCanvas","prevKey","clearCanvas","canvas","current","drawing","context","getContext","clearRect","width","height","clear","nextCAnvas","val","props","brushColor","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_c","$RefreshReg$"],"sources":["/Users/adeldiaz/Documents/projectsPortfolio/flipN/flip-note/src/component/Canvas.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport CanvasDraw from 'react-canvas-draw';\n\nconst Canvas = () => {\n  const canvasRef = useRef(null);\n  const [canvasKey, setCanvasKey] = useState(0);\n\n  const handleCreateNewCanvas = () => {\n    setCanvasKey(prevKey => prevKey + 1);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current.canvas.drawing;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvasRef.current.clear();\n  };\n\n  const nextCAnvas = () => {\n    const val  = canvasRef.current.props.brushColor\n    if(canvasRef.current.props.brushColor =='#444'){\n       \n            brushColor: '#ff0000' // Update to the new brush color\n          \n    }\n  }\n\n  return (\n    <div>\n      <h1>Canvas Component</h1>\n      <button onClick={handleCreateNewCanvas}>Create New Canvas</button>\n      <button onClick={clearCanvas}>Clear Canvas</button>\n      <button onClick={nextCAnvas}>get canvas</button>\n      <CanvasDraw ref={canvasRef} key={canvasKey} />\n    </div>\n  );\n};\n\nexport default Canvas;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,UAAU,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAE7C,MAAMS,qBAAqB,GAAGA,CAAA,KAAM;IAClCD,YAAY,CAACE,OAAO,IAAIA,OAAO,GAAG,CAAC,CAAC;EACtC,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,MAAM,GAAGN,SAAS,CAACO,OAAO,CAACD,MAAM,CAACE,OAAO;IAC/C,MAAMC,OAAO,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;IACvCD,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEL,MAAM,CAACM,KAAK,EAAEN,MAAM,CAACO,MAAM,CAAC;IACpDb,SAAS,CAACO,OAAO,CAACO,KAAK,CAAC,CAAC;EAC3B,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,GAAG,GAAIhB,SAAS,CAACO,OAAO,CAACU,KAAK,CAACC,UAAU;IAC/C,IAAGlB,SAAS,CAACO,OAAO,CAACU,KAAK,CAACC,UAAU,IAAG,MAAM,EAAC;MAEvCA,UAAU,EAAE,SAAS,EAAC;IAE9B;EACF,CAAC;;EAED,oBACErB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzB1B,OAAA;MAAQ2B,OAAO,EAAErB,qBAAsB;MAAAgB,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAClE1B,OAAA;MAAQ2B,OAAO,EAAEnB,WAAY;MAAAc,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnD1B,OAAA;MAAQ2B,OAAO,EAAET,UAAW;MAAAI,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChD1B,OAAA,CAACF,UAAU;MAAC8B,GAAG,EAAEzB;IAAU,GAAMC,SAAS;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAACxB,EAAA,CAjCID,MAAM;AAAA4B,EAAA,GAAN5B,MAAM;AAmCZ,eAAeA,MAAM;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}